{"ast":null,"code":"import Vue from 'vue';\n// import Vuex from 'Vuex'\n\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    // user: null,\n    // isAuthenticated: false\n  },\n  mutations: {\n    // SET_USER(state, user) {\n    //   state.user = user;\n    //   state.isAuthenticated = !!user;\n    // }\n  },\n  actions: {\n    // async login({ commit }, credentials) {\n    //   // 这里添加实际的登录 API 调用\n    //   // 临时使用 localStorage 模拟\n    //   const user = await new Promise((resolve) => {\n    //     setTimeout(() => {\n    //       const savedUser = localStorage.getItem('user');\n    //       if (savedUser) {\n    //         const userData = JSON.parse(savedUser);\n    //         if (userData.email === credentials.email && \n    //             userData.password === credentials.password) {\n    //           resolve(userData);\n    //         }\n    //       }\n    //       resolve(null);\n    //     }, 1000);\n    //   });\n\n    //   if (user) {\n    //     commit('SET_USER', user);\n    //   } else {\n    //     throw new Error('Invalid credentials');\n    //   }\n    // },\n\n    // async register({ commit }, userData) {\n    //   // 这里添加实际的注册 API 调用\n    //   // 临时使用 localStorage 模拟\n    //   await new Promise(resolve => setTimeout(resolve, 1000));\n    //   localStorage.setItem('user', JSON.stringify(userData));\n    //   commit('SET_USER', userData);\n    // },\n\n    // logout({ commit }) {\n    //   localStorage.removeItem('user');\n    //   commit('SET_USER', null);\n    // }\n  },\n  getters: {\n    // isAuthenticated: state => state.isAuthenticated,\n    // currentUser: state => state.user\n  }\n});","map":{"version":3,"names":["Vue","use","Vuex","Store","state","mutations","actions","getters"],"sources":["/Users/mlm1/Cursor_Apps/funer_website/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\n// import Vuex from 'Vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    // user: null,\n    // isAuthenticated: false\n  },\n  mutations: {\n    // SET_USER(state, user) {\n    //   state.user = user;\n    //   state.isAuthenticated = !!user;\n    // }\n  },\n  actions: {\n    // async login({ commit }, credentials) {\n    //   // 这里添加实际的登录 API 调用\n    //   // 临时使用 localStorage 模拟\n    //   const user = await new Promise((resolve) => {\n    //     setTimeout(() => {\n    //       const savedUser = localStorage.getItem('user');\n    //       if (savedUser) {\n    //         const userData = JSON.parse(savedUser);\n    //         if (userData.email === credentials.email && \n    //             userData.password === credentials.password) {\n    //           resolve(userData);\n    //         }\n    //       }\n    //       resolve(null);\n    //     }, 1000);\n    //   });\n\n    //   if (user) {\n    //     commit('SET_USER', user);\n    //   } else {\n    //     throw new Error('Invalid credentials');\n    //   }\n    // },\n    \n    // async register({ commit }, userData) {\n    //   // 这里添加实际的注册 API 调用\n    //   // 临时使用 localStorage 模拟\n    //   await new Promise(resolve => setTimeout(resolve, 1000));\n    //   localStorage.setItem('user', JSON.stringify(userData));\n    //   commit('SET_USER', userData);\n    // },\n\n    // logout({ commit }) {\n    //   localStorage.removeItem('user');\n    //   commit('SET_USER', null);\n    // }\n  },\n  getters: {\n    // isAuthenticated: state => state.isAuthenticated,\n    // currentUser: state => state.user\n  }\n}) "],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB;;AAEAA,GAAG,CAACC,GAAG,CAACC,IAAI,CAAC;AAEb,eAAe,IAAIA,IAAI,CAACC,KAAK,CAAC;EAC5BC,KAAK,EAAE;IACL;IACA;EAAA,CACD;EACDC,SAAS,EAAE;IACT;IACA;IACA;IACA;EAAA,CACD;EACDC,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EAAA,CACD;EACDC,OAAO,EAAE;IACP;IACA;EAAA;AAEJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}