{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'Vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    user: null,\n    isAuthenticated: false\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user;\n      state.isAuthenticated = !!user;\n    }\n  },\n  actions: {\n    async login({\n      commit\n    }, credentials) {\n      // 这里添加实际的登录 API 调用\n      // 临时使用 localStorage 模拟\n      const user = await new Promise(resolve => {\n        setTimeout(() => {\n          const savedUser = localStorage.getItem('user');\n          if (savedUser) {\n            const userData = JSON.parse(savedUser);\n            if (userData.email === credentials.email && userData.password === credentials.password) {\n              resolve(userData);\n            }\n          }\n          resolve(null);\n        }, 1000);\n      });\n      if (user) {\n        commit('SET_USER', user);\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    },\n    async register({\n      commit\n    }, userData) {\n      // 这里添加实际的注册 API 调用\n      // 临时使用 localStorage 模拟\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      localStorage.setItem('user', JSON.stringify(userData));\n      commit('SET_USER', userData);\n    },\n    logout({\n      commit\n    }) {\n      localStorage.removeItem('user');\n      commit('SET_USER', null);\n    }\n  },\n  getters: {\n    isAuthenticated: state => state.isAuthenticated,\n    currentUser: state => state.user\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","user","isAuthenticated","mutations","SET_USER","actions","login","commit","credentials","Promise","resolve","setTimeout","savedUser","localStorage","getItem","userData","JSON","parse","email","password","Error","register","setItem","stringify","logout","removeItem","getters","currentUser"],"sources":["/Users/mlm1/Cursor_Apps/funer_website/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\nimport Vuex from 'Vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    user: null,\n    isAuthenticated: false\n  },\n  mutations: {\n    SET_USER(state, user) {\n      state.user = user;\n      state.isAuthenticated = !!user;\n    }\n  },\n  actions: {\n    async login({ commit }, credentials) {\n      // 这里添加实际的登录 API 调用\n      // 临时使用 localStorage 模拟\n      const user = await new Promise((resolve) => {\n        setTimeout(() => {\n          const savedUser = localStorage.getItem('user');\n          if (savedUser) {\n            const userData = JSON.parse(savedUser);\n            if (userData.email === credentials.email && \n                userData.password === credentials.password) {\n              resolve(userData);\n            }\n          }\n          resolve(null);\n        }, 1000);\n      });\n\n      if (user) {\n        commit('SET_USER', user);\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    },\n    \n    async register({ commit }, userData) {\n      // 这里添加实际的注册 API 调用\n      // 临时使用 localStorage 模拟\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      localStorage.setItem('user', JSON.stringify(userData));\n      commit('SET_USER', userData);\n    },\n\n    logout({ commit }) {\n      localStorage.removeItem('user');\n      commit('SET_USER', null);\n    }\n  },\n  getters: {\n    isAuthenticated: state => state.isAuthenticated,\n    currentUser: state => state.user\n  }\n}) "],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;AAEb,eAAe,IAAIA,IAAI,CAACE,KAAK,CAAC;EAC5BC,KAAK,EAAE;IACLC,IAAI,EAAE,IAAI;IACVC,eAAe,EAAE;EACnB,CAAC;EACDC,SAAS,EAAE;IACTC,QAAQA,CAACJ,KAAK,EAAEC,IAAI,EAAE;MACpBD,KAAK,CAACC,IAAI,GAAGA,IAAI;MACjBD,KAAK,CAACE,eAAe,GAAG,CAAC,CAACD,IAAI;IAChC;EACF,CAAC;EACDI,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAC;MAAEC;IAAO,CAAC,EAAEC,WAAW,EAAE;MACnC;MACA;MACA,MAAMP,IAAI,GAAG,MAAM,IAAIQ,OAAO,CAAEC,OAAO,IAAK;QAC1CC,UAAU,CAAC,MAAM;UACf,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;UAC9C,IAAIF,SAAS,EAAE;YACb,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;YACtC,IAAIG,QAAQ,CAACG,KAAK,KAAKV,WAAW,CAACU,KAAK,IACpCH,QAAQ,CAACI,QAAQ,KAAKX,WAAW,CAACW,QAAQ,EAAE;cAC9CT,OAAO,CAACK,QAAQ,CAAC;YACnB;UACF;UACAL,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC;MAEF,IAAIT,IAAI,EAAE;QACRM,MAAM,CAAC,UAAU,EAAEN,IAAI,CAAC;MAC1B,CAAC,MAAM;QACL,MAAM,IAAImB,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACF,CAAC;IAED,MAAMC,QAAQA,CAAC;MAAEd;IAAO,CAAC,EAAEQ,QAAQ,EAAE;MACnC;MACA;MACA,MAAM,IAAIN,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACvDG,YAAY,CAACS,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACO,SAAS,CAACR,QAAQ,CAAC,CAAC;MACtDR,MAAM,CAAC,UAAU,EAAEQ,QAAQ,CAAC;IAC9B,CAAC;IAEDS,MAAMA,CAAC;MAAEjB;IAAO,CAAC,EAAE;MACjBM,YAAY,CAACY,UAAU,CAAC,MAAM,CAAC;MAC/BlB,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;IAC1B;EACF,CAAC;EACDmB,OAAO,EAAE;IACPxB,eAAe,EAAEF,KAAK,IAAIA,KAAK,CAACE,eAAe;IAC/CyB,WAAW,EAAE3B,KAAK,IAAIA,KAAK,CAACC;EAC9B;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}